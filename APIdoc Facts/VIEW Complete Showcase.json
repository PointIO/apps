{"forms":[{"_id":{"$oid":"57a202a34e0000ce118bea71"},"id":"57a202a34e0000ce118bea71","owner":{"appid":"51C54CDB-D278-4CFD-B8378EF13462E5FB","org":"io.point.jwang","user":"jwang@point.io"},"recType":"form","name":"Showcase Apidoc","desc":"NEW CREATED","creatorId":"jwang@point.io","updaterId":"jwang@point.io","tstamp":1470235299294,"createDate":{"$date":1470235299294},"origin":{"id":"577413fb250000d3c2ca4019","name":"Showcase Apidoc","desc":"NEW CREATED","creatorId":"jwang@point.io","createDate":1470235299294,"checksum":"F2D6CDEABD086640487FEF6A53C394F049438FB138A74DFB3F4877B5A4BB55EAL24422"},"data":{"form":"<script type=\"text/javascript\">\n    var baseURL = window.location.protocol + '//' + window.location.hostname + (window.location.port ? ':' + window.location.port : '');\n\n    App.FileController = Ember.Controller.extend({\n        viewUpload: false,\n        facts: jsonTask.FACTS,\n        init: function () {\n            console.log(\"fileinit\");\n            // if we are doing a content view then skip the shareList view\n            if (this.get(\"params.objTypeId\") === \"Content\") {\n                this.set(\"showShareList\", false);\n                this.set(\"contentOnly\", true);\n                var headers = {\n                    Authorization: sessionKey\n                };\n                this.set(\"headers\", headers);\n                var params = this.get(\"params\");\n                console.log(this);\n                console.log(this.get('facts'));\n                this.send(\"openShare\", params.sharename, params.sharetype, params.objId, params.path, params.containerid);\n            }\n            //if there is only 1 share, skip selection and open share at start\n            if(this.get('shares').length== 1){\n                var shares = this.get('shares');\n                console.log(shares)\n                console.log('open solo share')\n                this.set(\"showShareList\", false);\n                this.send(\"openShare\", shares[0].share.name, shares[0].share.type, shares[0].share.id, shares[0].path, shares[0].containerid); \n            }\n        },\n        queryParams: {path: \"\", containerid: \"\"},\n        containerid: null,\n        path: null,\n        showShareList: true,\n        contentOnly: false,\n        bPopUp: null,\n        isFileListEmpty: true,\n        dataArray: function () {\n            var dA = Ember.A();\n            var raw = this.get(\"model\");\n            for (var i in raw) {\n                dA.pushObject(raw[i]);\n            }\n            return dA\n        }.property(\"model\"),\n        filelist: Ember.A(),\n        folderlist: Ember.A(),\n        folderstack: Ember.A(),\n        shares: function () {\n            return this.get(\"dataArray\");\n        }.property(\"dataArray\"),\n        newFolderName: \"\",\n        headers: {\n            Authorization: sessionKey\n        },\n        uploadURL: function () {\n            return baseURL + '/apidoc/files/upload/' + this.get('folderlist.shareid');\n        }.property('folderList.shareid'),\n        uploadFile: null,\n        isLoading: false,\n        isRoot: function() {\n            return (this.get(\"folderlist\").queryParams.path == \"\")\n        }.property(\"folderlist.queryParams.path\"),\n        actions: {\n            submitAction: function () {\n                console.log('apidoc submit');\n                this.set('isLoading', true);\n                var self = this;\n                // We really want to inject RELATEDS\n                var injectableFiles = [];\n                this.get(\"filelist\").forEach(function (file) {\n                    injectableFiles.pushObject({\n                        \"ID\": file.link,\n                        \"LABEL\": file.name,\n                        \"TOOLTIP\": \"file.label\",\n                        \"TYPE\": \"PIO\",\n                        \"URL\": \"http://api.point.io/ui-html5/LinkViewer/app.html?id=\" + file.link\n                    });\n                });\n                var injectableFacts = {\n                    'REQUEST': {\n                        'INPUT': {\n                            'RELATEDS': injectableFiles,\n                            'FIELDS': [],\n                            'FACTS': []\n                        }\n                    }\n                };\n                Ember.$.ajax({\n                    type: \"PUT\",\n                    async: true,\n                    url: baseURL + '/messages/injectListJSON/' + taskid + '?Authorization=' + sessionKey,\n                    data: JSON.stringify(injectableFacts),\n                    dataType: 'json',\n                    contentType: 'application/json',\n                    success: function (data) {\n                        self.set('isLoading', false);\n                        //$('#emberForm').submit();\n                    }\n                });\n                return true; //this bubbles the action up\n            },\n            addFile: function (share) {\n                this.set('isLoading', true);\n                var self = this;\n                //create a link\n                var linkURL = \"\";\n                //v3\n                var servercall = baseURL + \"/apidoc/links/create/\" + share.shareid + \"?Authorization=\" + sessionKey;\n                $.ajax({\n                    type: \"POST\",\n                    async: false,\n                    data: {\n                        'containerid': share.containerid,\n                        'path': share.path,\n                        'fileid': share.fileid,\n                        'filename': share.name\n                    },\n                    url: servercall,\n                    success: function (data) {\n                        linkURL = data.RESPONSE.linkid;\n                        self.set('isLoading', false);\n                    }\n                });\n                //add it to the list\n                var fileArray = this.get(\"filelist\");\n                fileArray.pushObject({name: share.name, link: linkURL, label: share.name});\n                this.set(\"isFileListEmpty\", false);\n            },\n            removeFile: function (id) {\n                var fileList = this.get('filelist');\n                fileList.removeObject(id);\n                if (fileList.length == 0)\n                    this.set(\"isFileListEmpty\", true);\n            },\n            createFolderClick: function (shareid, containerid, path, modalAction) {\n                console.log(\"File folder\");\n                console.log(this);\n                var self = this;\n                this.set('isLoading', true);\n                var servercall = baseURL + \"/apidoc/folders/create/\" + shareid\n                $.ajax({\n                    type: \"POST\",\n                    async: false,\n                    data: {'containerid': containerid, 'path': path, 'foldername': this.get('newFolderName')},\n                    url: servercall,\n                    headers: {\n                        Authorization: sessionKey\n                    },\n                    cache: false,\n                    success: function (data) {\n                        self.send('modalFinished', modalAction);\n                    }\n                });\n            },\n            showModal: function(modalAction){\n               var is_open = this.get(modalAction);\n                if(is_open) { this.set(modalAction, false); }\n                this.set(modalAction, true); \n            },\n            modalFinished: function (modalAction) {\n                this.set('openCreateModal', false)\n                this.set('openUploadModal', false)\n                this.send('setLoading', false);\n                var thisFolder = this.get(\"folderlist\");\n                this.send('openShare', thisFolder.sharename, thisFolder.sharetype, thisFolder.shareid, thisFolder.queryParams.path, thisFolder.queryParams.containerid);\n            },\n            returnToSites: function() {\n                this.set('showShareList', true);\n            },\n            navigateToParent: function () {\n                if (this.get('folderstack').length == 0) {\n                    if (!this.get('contentOnly'))\n                    {\n                        this.send('returnToSites');\n                    }\n                }\n                else {\n                    var current = this.get('folderstack').pop();\n                    this.set('folderlist', current);\n                }\n            },\n            setLoading: function(state) {\n                this.set('isLoading', state);\n            },\n            openShare: function (sharename, sharetype, shareid, path, containerid) {\n                var self = this;\n                this.set('isLoading', true);\n                console.log(shareid);\n                if (typeof containerid != 'undefined')\n                    self.set('containerid', containerid);\n                else\n                    self.set('containerid', \"\");\n                if (typeof path != 'undefined')\n                    self.set('path', path);\n                else\n                    self.set('path', \"\");\n                var queryParams = {path: self.get('path'), containerid: self.get('containerid')};\n                Ember.$.ajax({\n                    async: false,\n                    url: baseURL + '/apidoc/folders/list/' + shareid,\n                    data: queryParams,\n                    headers: {\n                        Authorization: sessionKey\n                    },\n                    success: function (data) {\n                        var sharesList = Ember.A();\n                        (data.RESPONSE.RESULT.forEach(function (share) {\n                            share.isDir = (share.type === 'DIR');\n                            var params = [];\n                            if (share.path) {\n                                params.push('path=' + encodeURIComponent(share.path))\n                            }\n                            if (share.containerid) {\n                                params.push('containerid=' + encodeURIComponent(share.containerid))\n                            }\n                            if (share.fileid) {\n                                params.push('fileid=' + encodeURIComponent(share.fileid))\n                            }\n                            if (share.name) {\n                                params.push('filename=' + encodeURIComponent(share.name))\n                            }\n                            params.push('asBinary=true');\n\n                            share.downloadURL = baseURL + '/apidoc/files/download/' + share.shareid + '?Authorization=' + sessionKey + '&' + params.join(\"&\")\n\n                            sharesList.pushObject(share);\n                        }));\n                        if (self.get('folderlist.shareid') && (containerid) && (self.get('folderlist.queryParams.containerid') != containerid)) {\n                            // Push the previous folder if there IS a previous folder & if this is NOT the top folder & we aren't just refreshing the current folder\n                            self.get('folderstack').push({\n                                shares: self.get('folderlist.shares'),\n                                shareid: self.get('folderlist.shareid'),\n                                sharename: self.get('folderlist.sharename'),\n                                sharetype: self.get('folderlist.sharetype'),\n                                queryParams: self.get('folderlist.queryParams')\n                            });\n                            //console.log(containerid + \" Push & length is now: \" + self.get('folderstack').length);\n                        }\n                        // Set the current folder\n                        console.log(shareid);\n                        self.set('isLoading', false);\n                        sharesList.sortBy('isDir');\n                        self.set('folderlist.shares', sharesList);\n                        self.set('folderlist.shareid', shareid);\n                        self.set('folderlist.sharename', sharename);\n                        self.set('folderlist.sharetype', sharetype);\n                        self.set('folderlist.queryParams', queryParams);\n                    }\n                });\n                this.set('showShareList', false);\n            }\n        }\n    });\n\n    App.CreateFolderRoute = Ember.Route.extend({\n        model: function (params, options) {\n            var model = {};\n            model.shareid = params.shareid\n            model.containerid = options.queryParams.containerid\n            model.path = options.queryParams.path\n            model.sessionKey = sessionKey\n            model.url = document.URL\n            model.baseURL = baseURL\n            return model;\n        }\n    });\n    App.UploadFileRoute = Ember.Route.extend({\n        model: function (params, options) {\n            var model = {};\n            model.shareid = params.shareid\n            model.containerid = options.queryParams.containerid\n            model.path = options.queryParams.path\n            model.sessionKey = sessionKey\n            model.url = document.URL\n            model.baseURL = baseURL\n            return model;\n        }\n    });\n    App.FileUploadComponent = EmberUploader.FileField.extend({\n        multiple: true,\n        url: '',\n        filesDidChange: function (files) {\n            var self = this;\n            var uploadUrl = this.get('url');\n            \n            var headers = {\n                Authorization: sessionKey\n            };\n            var uploader = EmberUploader.Uploader.create({\n                url: uploadUrl,\n                paramName: 'uploadfile'\n            });\n            uploader.on('didUpload', function (e) {\n                self.sendAction('action', self.get('actionParams'));\n            });\n            if (!Ember.isEmpty(files)) {\n                console.log(\"Checking file url: \");\n                console.log(this.get('params'));\n                console.log(uploader.url)\n                this.sendAction('startAction', true);\n                uploader.uploadSerial(files, this.get('params'), headers);\n            }\n        }\n    });\n</script>\n\n<script type=\"text/x-handlebars\" data-template-name=\"file\">\n<style>\n.share-title{text-align:center;font-size:3.5rem;margin-bottom:15px}\n.share-grid{}\n.share-item{padding:10px;text-align:center;font-size:3rem;background-color: #f5f5f5;}\n.share-name{cursor:pointer;font-size:2rem;background-color: #fff;box-shadow: 2px 2px #e0e0e0;padding:10px;}\n\n.contents-grid{background-color: #f5f5f5;}\n.contents-header{display: flex;justify-content: space-around;font-size:3.5rem;margin-bottom:15px}\n.contents-item{padding:10px;background-color: #f5f5f5;}\n.contents-folder {background-color:#fff;box-shadow: 2px 2px #e0e0e0;padding:10px;}\n.contents-file {background-color:#fff;box-shadow: 2px 2px #e0e0e0;padding:10px}\n.contents-icons{margin-left:auto}\n\n.doc-icon-container{display:inline-block}\n.doc-icon {color:#2F6CFF;font-size:24px;}\n\n\n@media (min-width: 755px) {\n    .share-name {width:50%;}\n    .contents-file{display:flex}\n    \n}\n</style>\n        <div style=\"margin-top:15px;margin-bottom:15px;\">\n            {{#if controller.showShareList}}\n            <div id=\"sharelist\">\n                {{partial \"sharelist\"}}\n            </div>\n            {{/if}}\n            {{#unless controller.showShareList}}\n            <div id=\"folderlist\">\n                {{partial \"_folderlist\"}}\n            </div>\n            {{/unless}}\n        </div>\n        {{#unless controller.isFileListEmpty}}\n            <div class=\"showcase-grid\">\n                <div  id=\"attachedFilesContainer\" class='showcase-grid__item one-half push--one-quarter' style=\"color: black;border: solid 2px #2196F3;background-color: #E0E0E0;font-size: 1.2rem;margin-top: 20px;box-shadow: 0 2px 4px rgba(0,0,0,0.12),0 1px 2px rgba(0,0,0,0.24);\">\n                <h2 style='letter-spacing:initial'> Attached Files </h2>\n                <div >\n                    {{#each file in controller.filelist}}\n                        <div class='showcase-grid__item one-whole' style='display:flex;margin-top:10px'>\n                            <div class='showcase-grid__item five-sixths'><h4 style='letter-spacing:initial;display:inline'>{{file.name}}</h4></div>\n                            <div id=\"editFileLabel\" class='showcase-grid__item one-third'>{{input type=\"text\" value=file.label}}</div>\n                            <div class='showcase-grid__item one-sixth' {{action \"removeFile\" file}} style=\"cursor: pointer;\">\n                                <i class='showcase-icon doc-icon'>remove</i><span style='letter-spacing:initial;font-size:initial'>Remove</span>\n                            </div>\n                        </div>\n                    {{/each}}\n                </div>\n                </div>\n            </div>\n        {{/unless}}\n        \n        \n</script>\n\n<script type=\"text/x-handlebars\" data-template-name=\"_sharelist\">\n    <div class=\"showcase-grid share-grid\">\n        <div class=\"showcase-grid__item one-whole share-title\"><span>Select Storage</span></div>\n        {{#each share in controller.shares}}\n        <div class='showcase-grid__item one-whole share-item'>\n            <div class=\"showcase-grid__item share-name\">\n                <a {{action \"openShare\" share.share.name share.share.type share.share.id share.share.path share.share.containerid}}>{{share.share.name}}</a>\n            </div>\n        </div>\n        {{/each}}\n    </div>\n    <div align=\"center\" style={{unless controller.isLoading \"display:none;\"}}>\n        <img src=\"/assets/images/throbber.gif\"/>\n    </div>\n</script>\n\n<script type=\"text/x-handlebars\" data-template-name=\"_createFolder\">\n<div class=\"showcase-grid\">\n    <div  class='showcase-grid__item one-half push--one-quarter' style=\"color: black;border: solid 5px #00a0f7;background-color: white;font-size: 1.2rem;margin-top: 20px;\">\n        <form id=\"createfolderform\" class=\"form-horizontal\" enctype=\"application/x-www-form-urlencoded\" method=\"post\">\n            <h4 id=\"myModalLabel\" style='letter-spacing:initial'>New Folder</h4>\n            <div class=\"form-group\">\n                {{input id=\"createfolder\" name=\"foldername\" class=\"form-control\" type=\"text\" value=controller.newFolderName}}\n                <button class=\"btn btn-default\" type=\"submit\" {{action \"createFolderClick\" folderlist.shareid containerid path \"button-modal-create\"}}>Create</button>\n            </div>\n            <div align=\"center\" style={{unless controller.isLoading \"display:none;\"}}>\n                <img src=\"/assets/images/throbber.gif\"/>\n            </div>\n        </form>\n    </div>\n</div>\n</script>\n\n<script type=\"text/x-handlebars\" data-template-name=\"_uploadFile\">\n<div class=\"showcase-grid\">\n    <div  class='showcase-grid__item one-half push--one-quarter' style=\"color: black;border: solid 5px #00a0f7;background-color: white;font-size: 1.2rem;margin-top: 20px;\">\n        <form id=\"fileuploadform\" class=\"form-horizontal\" enctype=\"multipart/form-data\" method=\"post\">\n            <h4 id=\"myModalLabel\" style='letter-spacing:initial'>File Upload</h4>\n            <div class=\"form-group\">\n                {{file-upload class=\"form-control\" url=controller.uploadURL\n                params=controller.folderlist.queryParams\n                headers=controller.headers action='modalFinished'\n                actionParams=\"button-modal-upload\" startAction='setLoading'}}\n            </div>\n            <div align=\"center\" style={{unless controller.isLoading \"display:none;\"}}>\n                <img src=\"/assets/images/throbber.gif\"/>\n            </div>\n        </form>\n    </div>\n</div>\n</script>\n\n<script type=\"text/x-handlebars\" data-template-name=\"_folderlist\">\n    <div class=\"contents-header\">\n        <span>{{controller.folderlist.sharename}}</span>\n    </div>\n    <div class=\"showcase-grid contents-grid\">\n        <div class=\"showcase-grid__item one-whole contents-item\">\n            {{#if controller.contentOnly}}\n            <a {{action \"navigateToParent\" controller.folderlist.shareid}}>/{{controller.folderlist.queryParams.path}}</a>\n            {{else}}\n            <a {{action \"returnToSites\"}}>Home</a> <a {{action \"navigateToParent\" controller.folderlist.shareid}}>/{{controller.folderlist.queryParams.path}}</a>\n            {{/if}}\n        </div>\n        {{#each controller.folderlist.shares as |share|}}\n            {{#if share.isDir}}\n                <div class='showcase-grid__item one-half contents-item'>\n                    <div class=\"contents-folder\">\n                        <a {{action \"openShare\" controller.folderlist.sharename controller.folderlist.sharetype share.shareid share.path share.containerid}}>\n                        {{sc-icon size=\"small\" color='#2F6CFF' icon=\"folder\"}}\n                        {{share.name}}\n                        </a>\n                    </div>\n                </div>\n            {{/if}}\n        {{/each}}\n        {{#each controller.folderlist.shares as |share|}}\n            {{#unless share.isDir}}\n                <div class='showcase-grid__item one-half contents-item'>\n                    <div class=\"contents-file\">\n                        {{sc-icon size=\"small\" color='#2F6CFF' icon=\"insert_drive_file\"}}\n                        <span style=\"padding-left:10px\">{{share.name}}</span>\n                        <div class=\"contents-icons\">\n                            <div {{action \"addFile\" share}} class=\"doc-icon-container\">\n                                <i class='showcase-icon doc-icon'>attachment</i>\n                            </div>\n                            <div class=\"doc-icon-container\">\n                                <a href=\"{{share.downloadURL}}\"> <i class='showcase-icon doc-icon'>file_download</i> </a>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            {{/unless}}\n        {{/each}}\n        <div class=\"showcase-grid__item one-whole\"  style='letter-spacing:initial'>\n            {{#sc-buttons}}\n            <button {{action 'showModal' \"openUploadModal\"}}class=\"showcase-buttons__button default\"><span class=\"showcase-button__text\">Upload New</span><i class=\"showcase-icon\" style=\"pointer-events: none;\">file_upload</i></button>\n            <button {{action 'showModal' \"openCreateModal\"}}class=\"showcase-buttons__button default\"><span class=\"showcase-button__text\">New Folder</span><i class=\"showcase-icon\" style=\"pointer-events: none;\">create_new_folder</i></button>\n            {{/sc-buttons}}\n        </div>\n    </div>\n    {{#if viewUpload}}\n        {{partial 'uploadFile'}}\n    {{/if}}\n    {{#if viewNewFolder}}\n        {{partial 'createFolder'}}\n    {{/if}}\n    {{#sc-modal open=openUploadModal}}\n        <form id=\"fileuploadform\" class=\"form-horizontal\" enctype=\"multipart/form-data\" method=\"post\">\n            <h4 id=\"myModalLabel\" style='letter-spacing:initial'>File Upload</h4>\n            <div class=\"form-group\">\n                {{file-upload class=\"form-control\" url=controller.uploadURL\n                params=controller.folderlist.queryParams\n                headers=controller.headers action='modalFinished'\n                actionParams=\"openUploadModal\" startAction='setLoading'}}\n            </div>\n            {{#sc-overlay active=controller.isLoading }}\n                {{sc-loading}}\n            {{/sc-overlay}}\n        </form>\n    {{/sc-modal}}\n    \n    {{#sc-modal open=openCreateModal}}\n        <form id=\"createfolderform\" class=\"form-horizontal\" enctype=\"application/x-www-form-urlencoded\" method=\"post\">\n            <h4 id=\"myModalLabel\" style='letter-spacing:initial'>New Folder</h4>\n            <div class=\"form-group\">\n                {{input id=\"createfolder\" name=\"foldername\" class=\"form-control\" type=\"text\" value=controller.newFolderName}}\n                <button class=\"btn btn-default\" type=\"submit\" {{action \"createFolderClick\" folderlist.shareid containerid path \"openCreateModal\"}}>Create</button>\n            </div>\n            {{#sc-overlay active=controller.isLoading }}\n                {{sc-loading}}\n            {{/sc-overlay}}\n        </form>\n    {{/sc-modal}}\n</script>\n\n<script type=\"text/x-handlebars\" data-template-name=\"light-box\">\n    {{#if inlineImage}}<img src=\"{{unbound href}}\" title=\"{{unbound data-title}}\" class=\"{{unbound data-class}}\"/>{{/if}}{{yield}}\n</script>","facts":{}},"checksum":"F2D6CDEABD086640487FEF6A53C394F049438FB138A74DFB3F4877B5A4BB55EAL24422"}]}